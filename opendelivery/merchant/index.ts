import { MerchantBasicInfo } from './basic-info';
import { MerchantCategoryData } from './category';
import { Menu } from './menu';
import { Availability } from './menu/availability';
import { Item, ItemOffer } from './menu/item';
import { OptionGroup } from './menu/option';
import { Service } from './service';
import { Status } from './status';

export type MerchantType = 'RESTAURANT';
export type EntityType =
  | 'SERVICE'
  | 'MENU'
  | 'CATEGORY'
  | 'ITEM'
  | 'ITEM_OFFER'
  | 'OPTION_GROUP'
  | 'OPTION'
  | 'AVAILABILITY';

/**
 * Endpoint to get all data of a specific merchant, such as basic info, menus, and services.
 * This endpoint can optionally require an apiKey for authentication. Check with the Software Service that hosts the endpoint whether authentication is required or not.
 * /v1/merchant
 */
export interface Merchant {
  /**
   * [ 36 .. 100 ] characters
   * Unique Identifier. Must be formatted with Merchant Document + UUID
   * This id must be generated by the company responsible for the merchant's menu and have to be informed in the Order object by the Ordering Application.
   */
  id: string;

  /**
   * Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays).
   */
  status: Status;

  /**
   * A merchant BasicInfo defines properties such as the merchant name, location address, website, description, telephone number, for a merchant that the merchant Software Service serves. Typically, this data is static.
   */
  basicInfo: MerchantBasicInfo;

  /**
   * A required entity to implement. Describes food ordering services details for a merchant.
   */

  services: Service[];

  /**
   * Describes an array of menus.
   */
  menus: Menu[];
  /**
   * Describes an array of sections in the menu where ItemOffers will be showed.
   */
  categories: MerchantCategoryData[];
  /**
   * Describes an array of offers for the Items.
   */
  itemOffers: ItemOffer[];
  /**
   * Describes an array of items. To be used with an ItemOffer or an Option.
   */
  items: Item[];
  /**
   * Describes additional options of an ItemOffer.
   */
  optionGroups: OptionGroup[];
  /**
   * Describes the time period during which a Category or an ItemOffer entity is served.
   */
  availabilities: Availability[];
}
